{
  "openapi": "3.0.0",
  "info": {
    "title": "Harmoniq App API",
    "description": "API documentation for the Harmoniq application backend",
    "version": "1.0.0",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server."
    },
    {
      "url": "https://harmoniq-app-backend.onrender.com",
      "description": "Production server."
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Articles",
      "description": "Operations related to articles."
    },
    {
      "name": "Users",
      "description": "User-related operations."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "authRegister",
        "security": [],
        "summary": "Endpoint for user registration with optional avatar upload",
        "description": "Registers a new user. Performs uniqueness checks and creates a new user record. Validates data and stores user with hashed password and optional avatar URL.\n\n- **Name**: required, 2–32 characters\n- **Email**: required, max 64 characters\n- **Password**: required, 8–64 characters\n- **Avatar**: optional (image file)\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "authLogin",
        "security": [],
        "summary": "Endpoint for user login using email and password",
        "description": "Authenticates a registered user and returns access and refresh tokens.\n\n- **Email**: required, max — 64 characters\n- **Password**: required, min — 8 characters, max — 64 characters\n- Returns a **JWT access token** for authorized requests\n- Returns a **refresh token** for obtaining new access tokens when expired\n\n⚠️ Both tokens must be securely stored on the client side.\n⚠️ Access token should be sent in the `Authorization` header as a Bearer token.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "authLogout",
        "summary": "Endpoint for logging out the user by invalidating the refresh token",
        "description": "Logs out the currently authenticated user by clearing their stored refresh token.\n\n- Requires a **valid access token** in the Authorization header\n- Clears the **refresh token** from the user record in the database\n- Should be called when the user logs out manually or ends the session\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logout successful"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "authRefresh",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Endpoint for refreshing authentication tokens",
        "description": "Returns a new pair of access and refresh tokens if the provided refresh token is valid.\n\n- Requires a **valid refresh token** in the request body\n- Responds with new **accessToken** and **refreshToken**\n- Used to maintain an active session without requiring re-login\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/articles": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Get a list of all articles",
        "operationId": "getArticles",
        "security": [],
        "description": "Returns a list of all available articles from the database.\n\nEach article contains the following:\n- **img** (optional): URL to the article's image.\n- **title** (required): Title of the article.\n- **article** (required): Full content of the article.\n- **ownerId** (required): The ID of the user who created the article.\n- **rate** (optional): A numeric rating value (default is 0).\n- **createdAt** / **updatedAt**: Timestamps for article creation and last update.\n\nThis endpoint does not require authentication.\n\n### Use case:\nCan be used to:\n- Display all articles to end users on the frontend\n- Feed content into a news/blog UI component\n- Enable further filtering or searching by client-side logic\n",
        "responses": {
          "200": {
            "description": "A list of articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found articles!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Article"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "Articles"
        ],
        "summary": "Create a new article",
        "operationId": "createArticle",
        "description": "Creates a new article and saves it to the database.\n\nRequires authentication (`Bearer` token).\n\nAccepts multipart form-data including a photo and textual content.\n\n### Field Requirements:\n- **title**: required, 3–48 characters\n- **article**: required, 100–4000 characters\n- **img**: required, image file (max size 1MB)\n",
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreateArticle"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Article successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created article"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Article"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/articles/{articleId}": {
      "get": {
        "tags": [
          "Articles"
        ],
        "summary": "Get article by ID",
        "operationId": "getArticleById",
        "security": [],
        "description": "Retrieves a single article by its unique MongoDB `_id`.\n\n### Behavior:\n- If a valid `articleId` is provided and the article exists, returns the article data.\n- If the article does not exist, returns a 404 error.\n- If the provided ID is not a valid MongoDB ObjectId, returns a 400 error (handled by middleware).\n\n### Returned fields:\n- **_id**: Unique identifier of the article.\n- **img**: Optional URL of the article's image.\n- **title**: Title of the article.\n- **article**: Full text content.\n- **ownerId**: ID of the user who created the article.\n- **rate**: Numeric rating (default 0).\n- **createdAt**, **updatedAt**: Timestamps.\n",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "description": "The ID of the article to retrieve",
            "schema": {
              "type": "string",
              "example": "64a1cbe2f4891c001e57a1f5"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Article found successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found article with id 64a1cbe2f4891c001e57a1f5!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Article"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid article ID format"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "patch": {
        "tags": [
          "Articles"
        ],
        "summary": "Update an existing article by ID",
        "operationId": "patchArticle",
        "description": "Allows updating an existing article's fields by its unique identifier (`articleId`).\n\nRequires authentication (`Bearer` token).\n\nAccepts partial updates of:\n- **title**\n- **article**\n- **img** (optional new image upload)\n\nIf an image is provided, it replaces the existing one.\n\n### Notes:\n- Only fields provided in the request will be updated.\n- If article ID is invalid or not found, returns 404.\n- If image is uploaded, it must be max 1MB.\n",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the article to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/PatchArticle"
              }
            }
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Article updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched an article"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Article"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Article not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Articles"
        ],
        "summary": "Delete an article by ID",
        "operationId": "deleteArticle",
        "description": "Deletes an article from the database using its unique identifier (`articleId`).\n\nRequires authentication (`Bearer` token).\n\n### Notes:\n- If the article does not exist, a 404 error is returned.\n- Returns `204 No Content` on successful deletion — no body in the response.\n- The user must be authenticated, but no role or ownership checks are applied unless added in middleware.\n",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The ID of the article to delete"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "204": {
            "description": "Article deleted successfully (No Content)"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Article not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/saved-articles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get saved articles for the authenticated user",
        "operationId": "getSavedArticles",
        "description": "Returns a list of articles saved by the currently authenticated user.\n\nRequires a valid Bearer token to identify the user.\n\nThe saved articles are fetched by populating the `savedArticles` field in the user document.\n\n### Use cases:\n- Display user's saved articles on their dashboard\n- Allow users to manage saved reading content\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of saved articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Saved articles fetched successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Article"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/created-articles": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get articles created by the authenticated user",
        "operationId": "getCreatedArticles",
        "description": "Returns a list of articles authored (created) by the currently authenticated user.\n\nRequires a valid Bearer token to identify the user.\n\nThis endpoint filters articles in the database by `ownerId` field, matching the authenticated user's ID.\n\n### Use cases:\n- Show a user their authored content\n- Allow user to manage/edit their own posts\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of created articles",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Created articles fetched successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Article"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/current": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get the currently authenticated user",
        "operationId": "getCurrentUser",
        "description": "Returns information about the currently authenticated user.\n\nRequires a valid Bearer token to identify the user.\n\nThe password is excluded from the response. If the user is not found (e.g., deleted while token is still valid), a 404 is returned.\n\n### Use cases:\n- Display user profile info on account page\n- Initialize authenticated session data on frontend\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Current user profile",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Current user fetched successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/User"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "User not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/save/{articleId}": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Save an article to the user's saved list",
        "operationId": "saveArticle",
        "description": "Saves an article to the authenticated user's saved list.\n\nRequires a valid Bearer token.\n\n### Behavior:\n- If the article does not exist, returns 404.\n- If the article is already saved, returns 409 Conflict.\n- On success, returns the updated list of saved article IDs.\n\n### Use cases:\n- Allow users to bookmark or collect articles\n- Enable frontend to indicate saved state per article\n",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the article to be saved"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Article saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Article saved successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "64a1cbe2f4891c001e57a1f5"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Article not found"
          },
          "409": {
            "description": "Article already saved"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Remove an article from the user's saved list",
        "operationId": "removeSavedArticle",
        "description": "Removes an article from the authenticated user's saved articles list.\n\nRequires a valid Bearer token.\n\n### Behavior:\n- If the article is not in the user's saved list, returns 404.\n- On success, returns the updated saved articles list.\n\n### Use cases:\n- Allow users to un-save or remove bookmarked articles\n",
        "parameters": [
          {
            "name": "articleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the article to be removed from saved list"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Article removed from saved list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Article removed from saved list"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "64a1cbe2f4891c001e57a1f5"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "description": "Article not found in saved list"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get a list of all article authors",
        "operationId": "getAllUsers",
        "description": "Returns a list of users who have authored at least one article on the site.\n\n  Each user object may include public fields such as name, avatar etc.\n\n  ### Use cases:\n  - Display list of authors on a blog or article index page\n  - Show author info in filters or navigation\n",
        "security": [],
        "responses": {
          "200": {
            "description": "List of all users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Users fetched successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/User"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user by ID",
        "operationId": "getUserById",
        "description": "Retrieves public information of a specific user by their unique identifier.\n\n  This endpoint is typically used to:\n  - Display the author’s profile on an article page\n  - Fetch data to populate user profile modals or pages\n  - View a contributor’s details (e.g., in admin dashboards)\n\n  ### Behavior:\n  - Only returns non-sensitive fields (e.g., name, avatar, email)\n  - Returns a 404 error if the user does not exist\n  - The `id` parameter must be a valid MongoDB ObjectId\n\n  ### Example use cases:\n  - **/users/64b7dbf2eac4a914b7d6e217** → returns user details for that ID\n  - When viewing an article written by a specific user\n\n  > ⚠️ This endpoint does not require authentication, but only public data will be returned.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "MongoDB ObjectId of the user",
            "schema": {
              "type": "string",
              "example": "64b7dbf2eac4a914b7d6e217"
            }
          }
        ],
        "security": [],
        "responses": {
          "200": {
            "description": "User profile data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User fetched successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/avatar": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's avatar",
        "operationId": "updateUserAvatar",
        "description": "Updates the authenticated user's avatar image.\n\nThis endpoint allows a user to upload a new avatar image. The image is uploaded to a cloud storage service, and the resulting URL is stored in the user's profile.\n\n### Requirements:\n- **Authentication**: Required via Bearer Token\n- **File format**: Must be an image (e.g., `.jpg`, `.png`)\n- **Max file size**: 1MB (enforced at middleware or storage level)\n- The previous avatar (if any) is replaced by the new one\n\n### Behavior:\n- If no file is provided, avatar will remain unchanged\n- Responds with the updated user object, including the new avatar URL\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "avatar"
                ],
                "properties": {
                  "avatar": {
                    "type": "string",
                    "format": "binary",
                    "description": "Image file (max 1MB)"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User avatar updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/Invalid"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/users/info": {
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update user's personal information",
        "operationId": "updateUserInfo",
        "description": "Allows the authenticated user to update their profile information such as name and email.\n\n### Requirements:\n- **Authentication**: Required via Bearer Token\n- Both `name` and `email` are optional, but at least one must be provided\n\n### Validation:\n- **Name**:\n  - Must be a string\n  - 2–32 characters\n- **Email**:\n  - Must be a valid email address\n  - Maximum 64 characters\n\n### Behavior:\n- If both fields are missing, validation middleware should reject the request\n- Updates only the fields provided in the request body\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "minLength": 2,
                    "maxLength": 32,
                    "example": "Jane Doe"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "maxLength": 64,
                    "example": "jane@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User info updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "User updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "mysecurepassword"
          }
        }
      },
      "UserRegister": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "mysecurepassword"
          },
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully registered a user!"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "60d0fe4f5311236168a109ca"
              },
              "name": {
                "type": "string",
                "example": "John Doe"
              },
              "email": {
                "type": "string",
                "example": "john@example.com"
              },
              "avatar": {
                "type": "string",
                "example": "https://res.cloudinary.com/demo/image/upload/sample.jpg"
              }
            }
          }
        }
      },
      "Article": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64a1cbe2f4891c001e57a1f5"
          },
          "img": {
            "type": "string",
            "example": "https://example.com/image.jpg"
          },
          "title": {
            "type": "string",
            "example": "The Benefits of Music Therapy"
          },
          "article": {
            "type": "string",
            "example": "Music therapy has shown benefits in reducing anxiety and improving mood."
          },
          "ownerId": {
            "type": "string",
            "example": "64a1cbe2f4891c001e57a1d1"
          },
          "rate": {
            "type": "number",
            "example": 4.5
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-07-25T12:34:56.789Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2023-07-26T08:15:00.123Z"
          }
        }
      },
      "CreateArticle": {
        "type": "object",
        "required": [
          "title",
          "article",
          "img"
        ],
        "properties": {
          "title": {
            "type": "string",
            "example": "How Music Improves Mental Health",
            "minLength": 3,
            "maxLength": 48
          },
          "article": {
            "type": "string",
            "example": "This article explores how music therapy can reduce anxiety and boost emotional health.",
            "minLength": 100,
            "maxLength": 4000
          },
          "img": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "PatchArticle": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "example": "Updated Article Title",
            "minLength": 3,
            "maxLength": 48
          },
          "article": {
            "type": "string",
            "example": "Updated article content (at least 100 characters)...",
            "minLength": 100,
            "maxLength": 4000
          },
          "img": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64a1cbe2f4891c001e57a1d1"
          },
          "name": {
            "type": "string",
            "example": "Jane Doe"
          },
          "email": {
            "type": "string",
            "example": "jane@example.com"
          },
          "avatar": {
            "type": "string",
            "example": "https://res.cloudinary.com/demo/image/upload/v12345678/avatar.jpg"
          },
          "savedArticles": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "64a1cbe2f4891c001e57a1f5"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-01-01T12:00:00Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "example": "2025-07-01T12:00:00Z"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                }
              }
            }
          }
        }
      },
      "Conflict": {
        "description": "Email already registered",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Email already registered"
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Access denied",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "Invalid refresh token"
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Invalid or expired token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Invalid or expired token"
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "User not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "User not found"
                }
              }
            }
          }
        }
      },
      "Invalid": {
        "description": "Invalid file format or missing file",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "No file provided or invalid format"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}