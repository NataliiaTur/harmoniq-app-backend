getArticles:
  tags: [Articles]
  summary: Get a list of articles (with optional filters and pagination)
  operationId: getArticles
  security: []
  description: |
    Returns a list of articles from the database. Supports optional query parameters for filtering, pagination, and limiting results.

    ### Article fields:
    - **img** (optional): URL to the article's image.
    - **title** (required): Title of the article.
    - **article** (required): Full content of the article.
    - **ownerId** (required): The ID of the user who created the article.
    - **rate** (optional): A numeric rating value (default is 0).
    - **createdAt** / **updatedAt**: Timestamps for creation and update.

    ### Optional Query Parameters:
    - `filter=popular`: Returns articles sorted by descending rating.
    - `limit=4`: Limit the number of returned articles (useful without pagination).
    - `ownerId=<userId>`: Filter articles by specific user.
    - `page=<number>`: Page number for pagination (starts from 1).
    - `perPage=<number>`: Number of articles per page (default is 12 if not provided).

    ### Behavior:
    - If `page` or `perPage` is provided, paginated response is returned with metadata.
    - If no pagination is requested, all matching articles are returned up to the optional `limit`.

    ### Example use cases:
    - Show top 4 popular articles:
      `/api/articles?filter=popular&limit=4`
    - Paginated list of all articles:
      `/api/articles?page=2&perPage=10`
    - All articles by author:
      `/api/articles?ownerId=64f3...`

    This endpoint does **not** require authentication.
  parameters:
    - in: query
      name: filter
      schema:
        type: string
        enum: [popular]
      description: Filter for special cases. `popular` for top-rated articles.
    - in: query
      name: limit
      schema:
        type: integer
        minimum: 1
      description: Limit the number of articles (used without pagination).
    - in: query
      name: ownerId
      schema:
        type: string
      description: Return only articles by the specified user.
    - in: query
      name: page
      schema:
        type: integer
        minimum: 1
      description: Page number (for paginated results).
    - in: query
      name: perPage
      schema:
        type: integer
        minimum: 1
      description: Number of articles per page (default is 12).
  responses:
    '200':
      description: A list of articles or a paginated response
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                example: 200
              message:
                type: string
                example: Successfully found paginated articles!
              data:
                type: array
                items:
                  $ref: '../../components/schemas/articles/Article.yaml#/Article'
              pagination:
                type: object
                properties:
                  page:
                    type: integer
                    example: 2
                  perPage:
                    type: integer
                    example: 12
                  totalItems:
                    type: integer
                    example: 47
                  totalPages:
                    type: integer
                    example: 4
                  hasNextPage:
                    type: boolean
                    example: true
                  hasPreviousPage:
                    type: boolean
                    example: true
    '400':
      $ref: '../../components/responses/auth/BadRequest.yaml#/BadRequest'
    '500':
      description: Internal server error
