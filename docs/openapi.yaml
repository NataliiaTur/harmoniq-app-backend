openapi: 3.0.0
info:
  title: Harmoniq App API
  description: |
    **Harmoniq App** is a backend API for a modern web application that allows users to register, authenticate, save favorite articles, and manage their profile. The API follows a `RESTful` structure and returns responses in `JSON format`.

    ### Key Features:
    - User registration with avatar upload (multipart/form-data supported)
    - Login and logout functionality using JWT authentication
    - Access and Refresh token generation
    - Email verification after registration
    - File uploads to Cloudinary
    - Articles collection saves in MongoDB
    - Route protection using authentication middleware
    - Request validation using Joi

    ### Technologies Used:
    - **Node.js** + **Express.js** — backend platform
    - **MongoDB** + **Mongoose** — database and ORM
    - **JWT (JSON Web Tokens)** — authentication system
    - **Multer** — file handling for multipart/form-data
    - **Cloudinary** — cloud image storage
    - **Joi** — input validation
    - **dotenv** — environment variable management
    - **Swagger (OpenAPI)** — API documentation

    ### Source code:
    [https://github.com/StasSkv/harmoniq-app-backend](https://github.com/StasSkv/harmoniq-app-backend)

  version: 1.0.0
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://harmoniq-app-backend.onrender.com
    description: Production server

tags:
  - name: Auth
    description: Auth operations
  - name: Articles
    description: Operations related to articles
  - name: Users
    description: User-related operations

paths:
  /auth/register:
    post:
      $ref: 'swagger/paths/auth/register.yaml#/authRegister'
  /auth/login:
    post:
      $ref: 'swagger/paths/auth/login.yaml#/authLogin'
  /auth/logout:
    post:
      $ref: 'swagger/paths/auth/logout.yaml#/authLogout'
  /auth/refresh:
    post:
      $ref: 'swagger/paths/auth/refresh.yaml#/authRefresh'
  /articles:
    get:
      $ref: 'swagger/paths/articles/getAll.yaml#/getArticles'
    post:
      $ref: 'swagger/paths/articles/create.yaml#/createArticle'
  /articles/{articleId}:
    get:
      $ref: 'swagger/paths/articles/getById.yaml#/getArticleById'
    patch:
      $ref: 'swagger/paths/articles/patchById.yaml#/patchArticle'
    delete:
      $ref: 'swagger/paths/articles/deleteById.yaml#/deleteArticle'
  /users/saved-articles:
    get:
      $ref: 'swagger/paths/users/getSaved.yaml#/getSavedArticles'
  /users/created-articles:
    get:
      $ref: 'swagger/paths/users/getCreated.yaml#/getCreatedArticles'
  /users/current:
    get:
      $ref: 'swagger/paths/users/getCurrent.yaml#/getCurrentUser'
  /users/save/{articleId}:
    post:
      $ref: 'swagger/paths/users/saveArticle.yaml#/saveArticle'
    delete:
      $ref: 'swagger/paths/users/removeSaved.yaml#/removeSavedArticle'
  /users:
    get:
      $ref: 'swagger/paths/users/getAll.yaml#/getAllUsers'
  /users/{id}:
    get:
      $ref: 'swagger/paths/users/getById.yaml#/getUserById'
  /users/avatar:
    patch:
      $ref: 'swagger/paths/users/updateAvatar.yaml#/updateUserAvatar'
  /users/info:
    patch:
      $ref: 'swagger/paths/users/updateInfo.yaml#/updateUserInfo'

components:
  schemas:
    LoginResponse:
      $ref: swagger/components/schemas/auth/LoginResponse.yaml#/LoginResponse
    TokenResponse:
      $ref: swagger/components/schemas/auth/TokenResponse.yaml#/TokenResponse
    UserLogin:
      $ref: swagger/components/schemas/auth/UserLogin.yaml#/UserLogin
    UserRegister:
      $ref: swagger/components/schemas/auth/UserRegister.yaml#/UserRegister
    UserResponse:
      $ref: swagger/components/schemas/auth/UserResponse.yaml#/UserResponse

  responses:
    BadRequest:
      $ref: swagger/components/responses/auth/BadRequest.yaml#/BadRequest
    Conflict:
      $ref: swagger/components/responses/auth/Conflict.yaml#/Conflict
    Forbidden:
      $ref: swagger/components/responses/auth/Forbidden.yaml#/Forbidden
    Unauthorized:
      $ref: swagger/components/responses/auth/Unauthorized.yaml#/Unauthorized

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
