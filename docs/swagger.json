{
  "openapi": "3.0.0",
  "info": {
    "title": "Harmoniq App API",
    "description": "API documentation for the Harmoniq application backend",
    "version": "1.0.0",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://127.0.0.1:3000",
      "description": "Local development server."
    },
    {
      "url": "https://harmoniq-app-backend.onrender.com",
      "description": "Production server."
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "authRegister",
        "security": [],
        "summary": "Endpoint for user registration",
        "description": "Registers a new user. Performs uniqueness checks and creates a new user record.\n\n- **Name**: required, 2–32 characters\n- **Email**: required, max 64 characters\n- **Password**: required, 8–64 characters\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully registered a user!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "authLogin",
        "security": [],
        "summary": "Endpoint for user login using email and password",
        "description": "Authenticates a registered user and returns access and refresh tokens.\n\n- **Email**: required, max — 64 characters\n- **Password**: required, min — 8 characters, max — 64 characters\n- Returns a **JWT access token** for authorized requests\n- Returns a **refresh token** for obtaining new access tokens when expired\n\n⚠️ Both tokens must be securely stored on the client side.\n⚠️ Access token should be sent in the `Authorization` header as a Bearer token.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserLogin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "authLogout",
        "summary": "Endpoint for logging out the user by invalidating the refresh token",
        "description": "Logs out the currently authenticated user by clearing their stored refresh token.\n\n- Requires a **valid access token** in the Authorization header\n- Clears the **refresh token** from the user record in the database\n- Should be called when the user logs out manually or ends the session\n",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logout successful"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "authRefresh",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Endpoint for refreshing authentication tokens",
        "description": "Returns a new pair of access and refresh tokens if the provided refresh token is valid.\n\n- Requires a **valid refresh token** in the request body\n- Responds with new **accessToken** and **refreshToken**\n- Used to maintain an active session without requiring re-login\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "refreshToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "LoginResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserResponse"
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string"
          },
          "refreshToken": {
            "type": "string"
          }
        }
      },
      "UserLogin": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "mysecurepassword"
          }
        }
      },
      "UserRegister": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "john@example.com"
          },
          "password": {
            "type": "string",
            "example": "mysecurepassword"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Successfully registered a user!"
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "email": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "Bad Request"
                }
              }
            }
          }
        }
      },
      "Conflict": {
        "description": "Email already registered",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Email already registered"
                }
              }
            }
          }
        }
      },
      "Forbidden": {
        "description": "Access denied",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "Invalid refresh token"
                }
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Invalid or expired token",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "Invalid or expired token"
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}